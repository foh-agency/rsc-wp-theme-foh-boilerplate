<?php
/**
 * This file loads long-term cacheable resources (css and js),
 * by looking up their full hashed filename in manifest.json,
 * which is generated by WebpackManifestPlugin on build.
 * 
 * The logic goes like this:
 * 1. Look up anything in the manifest ending with .css and enqueue as a style
 * 2. Look up anything in the manifest ending with .js and enqueue as a script
 * 
 * Source maps are included.
 * 
 * @package eltheme
 */

define( 'ELTHEME_WEBPACK_DIST_URI', get_template_directory_uri() . '/dist' );
define( 'ELTHEME_WEBPACK_DIST_DIRECTORY', get_template_directory() . '/dist' );

/**
 * Retrieves the manifest and returns the contents as an associative array.
 * 
 * @return array[] $manifest
 *  e.g. [
 *   $plain_filename => hashed_filepath_fragment
 *  ]
 * 
 *  e.g.
 *  'main.js' => '/main.38947856dfaf234fdcde9293.js'
 */
function foh_get_manifest() {
	// Access the asset manifest generated by WebpackManifestPlugin.
	$manifest_path     = get_template_directory_uri() . '/dist/manifest.json';
	$manifest_file     = wp_remote_get( $manifest_path );

	if (is_wp_error($manifest_file)) {
        return new WP_Error(
            'missing_data',
            '⚠️ Required data is missing. Please run the initialization script first: npm run dev',
            array('missing_key' => 'required_key')
        );
    }
	
	$manifest_contents = $manifest_file['body'];
	// $manifest will be an associative array because we're passing the true param
	$manifest = json_decode( $manifest_contents, true );
	return $manifest;
}

// Check for error before defining constants
$manifest = foh_get_manifest();

if (is_wp_error($manifest)) {
    wp_die(
        $manifest->get_error_message(),
        'Build Error',
        array('response' => 500)
    );
}

// Define constants
define( 'FOH_WEBPACK_MANIFEST', foh_get_manifest() );
define( 'FOH_WEBPACK_MANIFEST_KEYS', array_keys( FOH_WEBPACK_MANIFEST ) );

/**
 * Enqueue styles produced by Webpack.
 */
function eltheme_load_stylesheets() {
	// From the manifest, extract keys ending in .css (stylesheets) or .css.map (source maps).
	$pattern    = '/^.*\.(css|css\.map)$/';
	$style_keys = preg_grep( $pattern, ELTHEME_WEBPACK_MANIFEST_KEYS );

	foreach ( $style_keys as $plain_filename ) {
		// TODO: these first few lines also appear in another loop in this file. Make DRY?
		// Query the manifest to find the hashed file path.
		$hashed_filepath_fragment = ELTHEME_WEBPACK_MANIFEST[ $plain_filename ];
		// Get the file system location (e.g. /Users/whatever).
		$hashed_filepath = ELTHEME_WEBPACK_DIST_DIRECTORY . $hashed_filepath_fragment;
		// Get the remote location (e.g. http://localhost:8888/whatever).
		$hashed_filepath_uri = ELTHEME_WEBPACK_DIST_URI . $hashed_filepath_fragment;
	
		// file_exists needs to test the file system path, not the remote one.
		if ( file_exists( $hashed_filepath ) ) {
			// Extract the useful parts of the filename.
			$name_matches        = preg_split( '/(\.)/', $plain_filename );
			$name                = $name_matches[0];
			$contenthash_matches = preg_split( '/(\.)/', $hashed_filepath_uri );
			$contenthash         = $contenthash_matches[1];

			// Register and enqueue the stylesheet.
			wp_register_style( $name, $hashed_filepath_uri, array(), $contenthash, 'all' );
			wp_enqueue_style( $name );
		}
	}
}

/** 
 * Enqueue js produced by Webpack.
 */
function eltheme_load_local_scripts() {
	// Enqueue all scripts in dist, including any chunks split out in Webpack's production mode.
	$pattern = '/^.*\.(js|js\.map)$/';

	$script_keys = preg_grep( $pattern, ELTHEME_WEBPACK_MANIFEST_KEYS );
	
	foreach ( $script_keys as $plain_filename ) {
		// TODO: these first few lines also appear in another loop in this file. Make DRY?
		// Query the manifest to find the hashed file path.
		$hashed_filepath_fragment = ELTHEME_WEBPACK_MANIFEST[ $plain_filename ];
		// Get the file system location (e.g. /Users/whatever).
		$hashed_filepath = ELTHEME_WEBPACK_DIST_DIRECTORY . $hashed_filepath_fragment;
		// Get the remote location (e.g. http://localhost:8888/whatever).
		$hashed_filepath_uri = ELTHEME_WEBPACK_DIST_URI . $hashed_filepath_fragment;
	
		// file_exists needs to test the file system path, not the remote one.
		if ( file_exists( $hashed_filepath ) ) {
			// Extract the useful parts of the filename.
			$name_matches        = preg_split( '/(\.)/', $plain_filename );
			$name                = $name_matches[0];
			$contenthash_matches = preg_split( '/(\.)/', $hashed_filepath_uri );
			$contenthash         = $contenthash_matches[1];

			// Register and enqueue the script (the true parameter loads it in the footer).
			wp_register_script( $name, $hashed_filepath_uri, array(), $contenthash, true ); // TODO: deps.
			wp_enqueue_script( $name );
		}
	}
}

add_action( 'wp_enqueue_scripts', 'eltheme_load_stylesheets' );
add_action( 'wp_enqueue_scripts', 'eltheme_load_local_scripts' );
